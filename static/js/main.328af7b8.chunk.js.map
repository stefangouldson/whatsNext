{"version":3,"sources":["assets/bandPic.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","page","ChangetoHom","setState","ChangetoMem","ChangetoSong","ChangetoDates","this","className","onClick","React","Component","Homepage","src","pic","alt","Memberspage","SongPage","DatePage","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,qC,sNCIrCC,E,2MACJC,MAAQ,CACNC,KAAK,Q,EAGPC,YAAc,WACZ,OAAO,EAAKC,SAAS,CAACF,KAAK,U,EAG7BG,YAAc,WACZ,OAAQ,EAAKD,SAAS,CAACF,KAAK,a,EAG9BI,aAAe,WACb,OAAQ,EAAKF,SAAS,CAACF,KAAK,W,EAG9BK,cAAgB,WACd,OAAQ,EAAKH,SAAS,CAACF,KAAK,W,wEAI5B,MAAsB,SAAlBM,KAAKP,MAAMC,KACjB,yBAAKO,UAAU,SACf,6BACI,wBAAIC,QAASF,KAAKL,aAAlB,QACA,wBAAIO,QAASF,KAAKH,aAAlB,SACA,wBAAIK,QAASF,KAAKF,cAAlB,SACA,wBAAII,QAASF,KAAKD,eAAlB,UAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,OAIyB,YAAlBC,KAAKP,MAAMC,KACpB,yBAAKO,UAAU,SACf,6BACE,wBAAIC,QAASF,KAAKL,aAAlB,QACA,wBAAIO,QAASF,KAAKH,aAAlB,SACA,wBAAIK,QAASF,KAAKF,cAAlB,SACA,wBAAII,QAASF,KAAKD,eAAlB,UAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAIyB,UAAlBC,KAAKP,MAAMC,KACpB,yBAAKO,UAAU,SACf,6BACE,wBAAIC,QAASF,KAAKL,aAAlB,QACA,wBAAIO,QAASF,KAAKH,aAAlB,SACA,wBAAIK,QAASF,KAAKF,cAAlB,SACA,wBAAII,QAASF,KAAKD,eAAlB,UAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAIyB,UAAlBC,KAAKP,MAAMC,KAClB,yBAAKO,UAAU,SACf,6BACE,wBAAIC,QAASF,KAAKL,aAAlB,QACA,wBAAIO,QAASF,KAAKH,aAAlB,SACA,wBAAIK,QAASF,KAAKF,cAAlB,SACA,wBAAII,QAASF,KAAKD,eAAlB,UAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,YATC,M,GA7DWI,IAAMC,WAsFlBC,EAAW,WACf,OACA,yBAAKJ,UAAU,QACf,yBAAKA,UAAU,iBAAiBK,IAAKC,IAAKC,IAAI,OAK1CC,EAAc,WAClB,OACE,yBAAKR,UAAU,QACf,6CACA,sLAKES,EAAW,WACf,OACE,yBAAKT,UAAU,QACb,wDAKAU,EAAW,WACf,OACE,yBAAKV,UAAU,QACb,iEAKAW,EAAS,WACb,OACE,gCACA,0DAOWpB,ICzHKqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.328af7b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bandPic.ffd47195.jpg\";","import React from 'react';\nimport './App.css';\nimport pic from './assets/bandPic.jpg'\n\nclass App extends React.Component{\n  state = {\n    page:\"Home\"\n  }\n\n  ChangetoHom = () =>{\n    return(this.setState({page:\"Home\"}))\n  }\n\n  ChangetoMem = () =>{\n    return (this.setState({page:\"Members\"}))\n  }\n\n  ChangetoSong = () =>{\n    return (this.setState({page:\"Songs\"}))\n  }\n\n  ChangetoDates = () =>{\n    return (this.setState({page:\"Dates\"}))\n  }\n\n  render(){\n    if (this.state.page===\"Home\"){return(\n  <div className=\"Pages\">\n  <nav>\n      <h1 onClick={this.ChangetoHom}>Home</h1>\n      <h1 onClick={this.ChangetoMem}>About</h1>\n      <h1 onClick={this.ChangetoSong}>Songs</h1>\n      <h1 onClick={this.ChangetoDates}>Dates</h1>\n  </nav>\n    <Homepage/>\n    <Footer/>\n  </div>\n    )}\n\n  else if (this.state.page===\"Members\"){return(\n  <div className=\"Pages\">\n  <nav>\n    <h1 onClick={this.ChangetoHom}>Home</h1>\n    <h1 onClick={this.ChangetoMem}>About</h1>\n    <h1 onClick={this.ChangetoSong}>Songs</h1>\n    <h1 onClick={this.ChangetoDates}>Dates</h1>\n  </nav>\n    <Memberspage/>\n    <Footer/>\n  </div>\n    )}\n\n  else if (this.state.page===\"Songs\"){return(\n  <div className=\"Pages\">\n  <nav>\n    <h1 onClick={this.ChangetoHom}>Home</h1>\n    <h1 onClick={this.ChangetoMem}>About</h1>\n    <h1 onClick={this.ChangetoSong}>Songs</h1>\n    <h1 onClick={this.ChangetoDates}>Dates</h1>\n  </nav>\n    <SongPage/>\n    <Footer/>\n  </div>\n    )}\n\n  else if (this.state.page===\"Dates\"){return(\n    <div className=\"Dates\">\n    <nav>\n      <h1 onClick={this.ChangetoHom}>Home</h1>\n      <h1 onClick={this.ChangetoMem}>About</h1>\n      <h1 onClick={this.ChangetoSong}>Songs</h1>\n      <h1 onClick={this.ChangetoDates}>Dates</h1>\n    </nav>\n      <DatePage/>\n      <Footer/>\n    </div>\n    )}\n  }\n}\n// const Navbar = () =>{\n//   return (\n//     <nav>\n//       <h1>Home</h1>\n//       <button onClick=\"ChangetoMem\">Members</button>\n//       <h1>Songs</h1>\n//       <h1>Dates</h1>\n//     </nav>\n//   )\n// }\n\nconst Homepage = () =>{\n  return(\n  <div className=\"page\">\n  <img className=\"background-img\" src={pic} alt=\"\"></img>\n  </div>\n  )\n}\n\nconst Memberspage = () =>{\n  return (\n    <div className=\"page\">\n    <h2>Meet The Band</h2>\n    <p>What's Next is an amazing band playing in the North West with an excellent group of musicians able to play great music and entertain crowds of people</p>\n    </div>\n  )\n}\n\nconst SongPage = () =>{\n  return (\n    <div className=\"page\">\n      <h2>This is the songs page</h2>\n    </div>\n  )\n}\n\nconst DatePage = () =>{\n  return (\n    <div className=\"page\">\n      <h2>This is the upcoming dates page</h2>\n    </div>\n  )\n}\n\nconst Footer = () =>{\n  return (\n    <footer>\n    <h3>Email: email@example.com</h3>\n    </footer>\n  )\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}